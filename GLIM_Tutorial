path <- "/home/manish/GLRM"
setwd(path)

#must DO GLRM Tutorial
#http://learn.h2o.ai/content/tutorials/glrm/glrm-tutorial.html

library(h2o)
localH2o <- h2o.init(nthreads = -1)

gait.hex <- h2o.importFile(path = normalizePath("subject01_walk1.csv"),destination_frame = "gait.hex")
dim(gait.hex)
head(gait.hex)

gait.glrm <- h2o.glrm(training_frame = gait.hex,
                      cols = 2:ncol(gait.hex),
                      k=10,
                      loss = "Quadratic",
                      regularization_x = "None",
                      regularization_y = "None",
                      max_iterations = 1000)

plot(gait.glrm)

gait.y <- gait.glrm@model$archetypes
gait.y.mat <- as.matrix(gait.y)
x_coords <- seq(1,ncol(gait.y),by=3)
y_coords <- seq(2,ncol(gait.y),by=3)

feat_nams <- sapply(colnames(gait.y), function(nam){ substr(nam, 1, nchar(nam)-1)})
feat_nams <- as.character(feat_nams[x_coords])

for(k in 1:10) {
  plot(gait.y.mat[k,x_coords], gait.y.mat[k,y_coords], xlab = "X-Coordinate Weight", ylab = "Y-Coordinate Weight", main = paste("Feature Weights of Archetype", k), col = "blue", pch = 19, lty = "solid")
  text(gait.y.mat[k,x_coords], gait.y.mat[k,y_coords], labels = feat_nams, cex = 0.7, pos = 3)
  cat("Press [Enter] to continue")
  line <- readline()
}


gait.x <- h2o.getFrame(gait.glrm@model$representation_name)
time.df <- as.data.frame(gait.hex$Time[1:150])[,1]
gait.x.df <- as.data.frame(gait.x[1:150,])

matplot(time.df,gait.x.df,xlab = "Time",ylab = "Archetypal Projection", main = "Archetypes over Time", type = "l", lty = 1, col = 1:5)
legend("topright",legend = colnames(gait.x.df),col = 1:5,pch = 1)

gait.pred <- predict(gait.glrm,gait.hex)
head(gait.pred)

lacro.df <- as.data.frame(gait.hex$L.Acromium[1:150])

##############################################################33

acs_orig <- h2o.importFile(path = normalizePath("ACS_13_5YR_DP02_cleaned.csv"),col.types = c("enum", rep("numeric", 149)))
str(acs_orig)

acs_zcta_col <- acs_orig$ZCTA5
acs_full <- acs_orig[,-which(colnames(acs_orig) == "ZCTA5")]
dim(acs_full)
summary(acs_full)

acs_model <- h2o.glrm(training_frame = acs_full,
                      k = 10, 
                      transform = "STANDARDIZE", 
                      loss = "Quadratic", 
                      regularization_x = "Quadratic", 
                      regularization_y = "L1",
                      max_iterations = 100, 
                      gamma_x = 0.25, 
                      gamma_y = 0.5)
plot(acs_model)

zcta_arch_x <- h2o.getFrame(acs_model@model$representation_name)
head(zcta_arch_x)

idx <- ((acs_zcta_col == "10065") |   # Manhattan, NY (Upper East Side)
          (acs_zcta_col == "11219") |   # Manhattan, NY (East Harlem)
          (acs_zcta_col == "66753") |   # McCune, KS
          (acs_zcta_col == "84104") |   # Salt Lake City, UT
          (acs_zcta_col == "94086") |   # Sunnyvale, CA
          (acs_zcta_col == "95014"))    # Cupertino, CA

city_arch <- as.data.frame(zcta_arch_x[idx,1:2])
xeps <- (max(city_arch[,1]) - min(city_arch[,1])) / 10
yeps <- (max(city_arch[,2]) - min(city_arch[,2])) / 10
xlims <- c(min(city_arch[,1]) - xeps, max(city_arch[,1]) + xeps)
ylims <- c(min(city_arch[,2]) - yeps, max(city_arch[,2]) + yeps)
plot(city_arch[,1], city_arch[,2], xlim = xlims, ylim = ylims, xlab = "First Archetype", ylab = "Second Archetype", main = "Archetype Representation of Zip Code Tabulation Areas")
text(city_arch[,1], city_arch[,2], labels = c("Upper East Side", "East Harlem", "McCune", "Salt Lake City", "Sunnyvale", "Cupertino"), pos = 1)

whd_zcta <- h2o.importFile(path = normalizePath("whd_zcta_cleaned.csv"),col.types = c(rep("enum", 7), rep("numeric", 97)))
dim(whd_zcta)

split <- h2o.runif(whd_zcta)
train <- whd_zcta[split<=0.8,]
test <- whd_zcta[split>0.8,]


myY <- "flsa_repeat_violator"
myX <- setdiff(5:ncol(train),which(colnames(train) == myY))

orig_time <- system.time(
  dl_orig <- h2o.deeplearning(x=myX,y=myY,training_frame = train,
                              validation_frame = test,
                              distribution = "multinomial",
                              epochs = 0.1,
                              hidden = c(50,50,50)))
  

zcta_arch_x$zcta5_cd <- acs_zcta_col
whd_arch <- h2o.merge(whd_zcta,zcta_arch_x,all.x = T,all.y = F)
whd_arch$zcta5_cd <- NULL
head(whd_arch)

train_comb <- whd_arch[split <= 0.8,]
test_comb <- whd_arch[split > 0.8,]
head(train_comb)    

myX <- setdiff(5:ncol(train_comb), which(colnames(train_comb) == myY))
comb_time <- system.time(dl_comb <- h2o.deeplearning(x = myX, y = myY, training_frame = train_comb,
                                                     validation_frame = test_comb, distribution = "multinomial",
                                                     epochs = 0.1, hidden = c(50,50,50)))
  
data.frame(original = c(orig_time[3], h2o.logloss(dl_orig, train = TRUE), h2o.logloss(dl_orig, valid = TRUE)),
           reduced  = c(mod_time[3], h2o.logloss(dl_mod, train = TRUE), h2o.logloss(dl_mod, valid = TRUE)),
           combined = c(comb_time[3], h2o.logloss(dl_comb, train = TRUE), h2o.logloss(dl_comb, valid = TRUE)),
           row.names = c("runtime", "train_logloss", "test_logloss"))  
  
  
  
  
  
  
